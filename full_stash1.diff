diff --git a/Class_Schedule.csv b/Class_Schedule.csv
index 30102c1..2b2edc2 100644
--- a/Class_Schedule.csv
+++ b/Class_Schedule.csv
@@ -1,6 +1,6 @@
 Employee ID,Class Building,Slot ID
 13665,MGR,L51+52
 15701,PRP,L7+8
-15754,SJT,D2
+15754,SJT,D1
 10312,GDN,C1
 13143,PRP,F2
diff --git a/generateReport.py b/generateReport.py
index 7123b6f..fa10737 100644
--- a/generateReport.py
+++ b/generateReport.py
@@ -36,13 +36,29 @@ def filter_classes(class_schedule, calender_df):
             filtered_schedule.append((start, end, day, day_to_date[day]))
     return filtered_schedule
 
-def full_attendance_report(emp_id, date_df, attendance_df):
+def build_first_class_times(schedule_list, slots_df):
+    class_times = {}
+    for _, slot_id in schedule_list:
+        matches = slots_df[slots_df['Slot_ID'] == slot_id]
+        for _, row in matches.iterrows():
+            start_time = datetime.strptime(row['Start_Time'], "%H:%M").time()
+            day = row['Day']
+            if day not in class_times or start_time < class_times[day]:
+                class_times[day] = start_time
+    return class_times
+
+def full_attendance_report(emp_id, date_df, attendance_df, class_slots_df):
     results = []
+
+    # Create a dict of class days and their corresponding start times
+    emp_schedule = get_schedule(emp_id, schedule)
+    first_class_time = build_first_class_times(emp_schedule, slots)
+
     for _, row in date_df.iterrows():
         date = row['Date']
         day = row['Day']
         work_start_str = row['From Time']
-        
+
         if work_start_str == 'NA':
             continue
 
@@ -52,7 +68,7 @@ def full_attendance_report(emp_id, date_df, attendance_df):
             (attendance_df['Employee ID'] == emp_id) & 
             (attendance_df['Date'] == date)
         ]
-        
+
         if emp_attendance.empty:
             status = "Absent"
         else:
@@ -62,8 +78,16 @@ def full_attendance_report(emp_id, date_df, attendance_df):
             if punch_in_time <= work_start:
                 status = "Arrived In Time"
             else:
-                status = "Late"
-        
+                if day in first_class_time:
+                    print(punch_in_time)
+                    print(first_class_time)
+                    if punch_in_time <= first_class_time[day]:
+                        status = "Late entry"
+                    else:
+                        status = "Late to class"
+                else:
+                    status = "Late entry"
+
         results.append((date.strftime("%d-%m-%Y"), day, str(work_start), status))
     return results
 
@@ -90,7 +114,15 @@ date_range_df = calender[
     (calender['Status'] == 'Instructional')
 ]
 
-attendance_report = full_attendance_report(empID, date_range_df, attendance)
+emp_schedule = get_schedule(empID, schedule)
+class_slots = get_class(emp_schedule, slots)
+filtered_classes = filter_classes(class_slots, calender)
+
+timetable = pd.DataFrame(filtered_classes, columns=['Start_Time', 'End_Time', 'Day', 'Date'])
+timetable['Employee ID'] = empID
+timetable['Date'] = pd.to_datetime(timetable['Date'], dayfirst=True)
+
+attendance_report = full_attendance_report(empID, date_range_df, attendance, timetable)
 print("\nAttendance Report (Instructional Days):")
 for date, day, work_start, status in attendance_report:
     print(f"{date} ({day}) - Work starts at {work_start} - {status}")
